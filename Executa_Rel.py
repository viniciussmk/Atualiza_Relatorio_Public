import datetime
import pyodbc
import csv
import os
import shutil

# Defina a connection string para o servidor SQL
server = 'server'
database = 'database'
username = 'username'
password = 'password'
driver = '{ODBC Driver 17 for SQL Server}'
cnxn = pyodbc.connect(f'DRIVER={driver};SERVER={server};DATABASE={database};UID={username};PWD={password}')

# Defina a query SELECT a ser executada
query = """
SELECT  CASE WHEN (BEA_TIPADM = '0') THEN 'NAO INFORMADO' WHEN (BEA_TIPADM = '1') THEN 'URGÊNCIA/EMERGÊNCIA' WHEN (BEA_TIPADM = '2') THEN 'URGÊNCIA/EMERGÊNCIA' WHEN (BEA_TIPADM = '3') THEN 'URGÊNCIA/EMERGÊNCIA' WHEN (BEA_TIPADM = '4') THEN 'URGÊNCIA/EMERGÊNCIA' WHEN (BEA_TIPADM = '5') THEN 'URGÊNCIA/EMERGÊNCIA' WHEN (BEA_TIPADM = '6') THEN 'ELETIVA' WHEN (BEA_TIPADM = '9') THEN 'ELETIVA' END AS 'SOLICITAÇÃO', 
 BEA_TIPADM AS 'TIPO DE ADMISSÃO PREENCHIDO', 
 CASE WHEN BEA_TIPADM = '0' THEN 'NAO INFORMADO' WHEN BEA_DTDIGI < '20220610' 
 AND BEA_TIPADM = '1' THEN 'URGENCIA/EMERGENCIA' WHEN BEA_DTDIGI >= '20220610' 
 AND BEA_TIPADM = '1' THEN 'ELETIVO' WHEN BEA_TIPADM = '2' THEN 'URGENCIA/EMERGENCIA' WHEN BEA_TIPADM = '3' THEN 'URGENCIA/EMERGENCIA' WHEN BEA_TIPADM = '4' THEN 'URGENCIA/EMERGENCIA' WHEN BEA_TIPADM = '5' THEN 'URGENCIA/EMERGENCIA' WHEN BEA_TIPADM = '6' THEN 'ELETIVO' WHEN BEA_TIPADM = '9' THEN 'ELETIVO' ELSE ' ' END AS 'DESCRIÇÃO DO TIPO DE ADMISSÃO', 
 BE2_OPEMOV + BE2_ANOAUT + BE2_MESAUT + BE2_NUMAUT AS 'NUMERO GUIA', 
 BCL_DESCRI AS 'TIPO DE GUIA', 
 CASE WHEN (BEA_CANCEL = '1') THEN 'SIM' WHEN (BEA_CANCEL = '0') THEN 'NÃO' END AS 'CANCELADA?', 
 BE2_NOMUSR AS 'BENEFICIÁRIO', 
 CASE WHEN (BEA_STATUS = '1') THEN 'AUTORIZADA' WHEN (BEA_STATUS = '2') THEN 'AUTORIZADA PARCIALMENTE' WHEN (BEA_STATUS = '3') THEN 'NÃO AUTORIZADA' WHEN (BEA_STATUS = '6') THEN 'EM ANALISE PELA AUDITORIA' END AS 'STATUS', 
 BE2_CODRDA AS 'CODIGO DA RDA', 
 BAU_NOME AS 'PRESTADOR', 
 BE2_CODPAD AS 'CODIGO DA TABELA', 
 BE2_CODPRO AS 'CODIGO DO PROCEDIMENTO', 
 CASE WHEN (BR8_AUTORI = '1') THEN 'AUTOMATICA' WHEN (BR8_AUTORI = '3') THEN 'AUDITORIA' END AS 'AUTORIZAÇÃO DO PROCEDIMENTO', 
 BE2_DESPRO AS 'DESCRIÇÃO', 
 CASE WHEN TRIM(BE2_DATPRO) = '' THEN '' ELSE CONVERT(
   VARCHAR(10), 
   CONVERT(DATE, BE2_DATPRO), 103
) END AS 'DATA PROCEDIMENTO', 
 BE2_HORPRO AS 'HORA PROCEDIMENTO', 
 CASE WHEN (BEA_NUMAUT LIKE '9%') THEN 'HAT' ELSE 'PLS' END AS 'SOLICITADA VIA', 
 CASE WHEN (BEA_AUDITO = '1') THEN 'SIM' ELSE 'NÃO' END AS 'AUDITORIA?', 
 BA3_CODPLA AS 'CODIGO DO PLANO', 
 BI3_DESCRI AS 'DESCRIÇÃO DO PLANO', 
 BEA_SIGLA AS 'SIGLA CONSELHO SOLICITANTE', 
 BEA_ESTSOL AS 'UF CONSELHO SOLICITANTE', 
 BEA_REGSOL AS 'NUM CONSELHO SOLICITANTE', 
 BEA_NOMSOL AS 'NOME SOLICITANTE', 
 CASE WHEN BEA.BEA_TPGRV = '1' THEN '1 - REMOTE PROTHEUS' WHEN BEA.BEA_TPGRV = '2' THEN '2 - INTERNET(RPC)' WHEN BEA.BEA_TPGRV = '3' THEN '3 - POS' WHEN BEA.BEA_TPGRV = '4' THEN '4 - IMPORTACAO MANUAL' END TIPO_GRAVAÇÃO, 
 CASE B53.B53_SITUAC WHEN '0' THEN 'NAO' WHEN '1' THEN 'SIM' WHEN '2' THEN 'EM ANALISE' WHEN '3' THEN 'EM ESPERA' WHEN '4' THEN 'INCONSISTENCIA' END 'ANALISADA' 
 FROM BE2010 (NOLOCK) BE2 
 INNER JOIN BAU010 (NOLOCK) BAU ON BAU_FILIAL = BE2_FILIAL 
 AND BAU_CODIGO = BE2_CODRDA 
 AND BAU.D_E_L_E_T_ = ' ' 
 INNER JOIN BCL010 (NOLOCK) BCL ON BCL_FILIAL = BE2_FILIAL 
 AND BCL_TIPGUI = BE2_TIPGUI 
 AND BCL.D_E_L_E_T_ = ' ' 
 INNER JOIN BEA010 (NOLOCK) BEA ON BEA_FILIAL = BE2_FILIAL 
 AND BE2_OPEMOV = BEA_OPEMOV 
 AND BE2_ANOAUT = BEA_ANOAUT 
 AND BE2_MESAUT = BEA_MESAUT 
 AND BE2_NUMAUT = BEA_NUMAUT 
 AND BEA.D_E_L_E_T_ = ' ' 
 LEFT JOIN BR8010 (NOLOCK) BR8 ON BR8_FILIAL = BE2_FILIAL 
 AND BR8_CODPSA = BE2_CODPRO 
 AND BE2_CODPAD = BR8_CODPAD 
 AND BR8.D_E_L_E_T_ = ' ' 
 INNER JOIN BA3010 (NOLOCK) BA3 ON BA3_FILIAL = BEA_FILIAL 
 AND BA3_CODINT = BEA_OPEUSR 
 AND BA3_CODEMP = BEA_CODEMP 
 AND BA3_MATRIC = BEA_MATRIC 
 AND BA3.D_E_L_E_T_ = ' ' 
 INNER JOIN BI3010 (NOLOCK) BI3 ON BI3_FILIAL = BA3_FILIAL 
 AND BI3_CODIGO = BA3_CODPLA 
 AND BI3_VERSAO = BA3_VERSAO 
 AND BI3.D_E_L_E_T_ = ' ' 
 LEFT JOIN B53010 (NOLOCK) B53 ON (BE2_OPEMOV + BE2_ANOAUT + BE2_MESAUT + BE2_NUMAUT) = B53_NUMGUI
WHERE  BE2.D_E_L_E_T_ = ''  AND BAU.D_E_L_E_T_ = '' AND BCL.D_E_L_E_T_ = '' AND BAU_CODIGO NOT IN ('000015', '000057') 
 AND BE2_DATPRO >= '20230101'
"""

# Execute a query SELECT e armazene o resultado em um DataFrame
cursor = cnxn.cursor()  
cursor.execute(query)
resultado = cursor.fetchall()

data_hora = str(datetime.datetime.now())

# Exporte o DataFrame para um arquivo CSV
nome_arquivo = 'Executa_Rel_' + data_hora[0:10] +'.csv'

with open(nome_arquivo, 'w', newline='') as arquivo_csv:
    writer = csv.writer(arquivo_csv, delimiter=';')
    # Escreva o cabeçalho do arquivo CSV
    writer.writerow([column[0] for column in cursor.description])
    # Escreva o resultado da consulta no arquivo CSV
    for row in resultado:
        writer.writerow(row)

cursor.close()
cnxn.commit()

caminho_origem = 'De' + nome_arquivo

caminho_destino = 'Para' + nome_arquivo

if os.path.exists(caminho_origem) and os.access(os.path.dirname(caminho_destino), os.W_OK):
    shutil.move(caminho_origem, caminho_destino)
else:
    print("Não foi possível mover o arquivo.")